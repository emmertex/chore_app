#!/usr/bin/env python3
import os
import sys
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent
SITE_PACKAGES = BASE_DIR / 'venv' / 'lib' / f"python{sys.version_info.major}.{sys.version_info.minor}" / 'site-packages'

MIGRATIONS_DIR = SITE_PACKAGES / 'django_cron' / 'migrations'

# Minimal 0001 migration compatible with Django 5.2+
MIGRATION_0001 = """# Generated manually for Django 5.2+ compatibility
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='CronJobLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=64, db_index=True)),
                ('start_time', models.DateTimeField(db_index=True)),
                ('end_time', models.DateTimeField(db_index=True)),
                ('is_success', models.BooleanField(default=False)),
                ('message', models.TextField(default='', blank=True)),
                ('ran_at_time', models.TimeField(null=True, blank=True, db_index=True, editable=False)),
            ],
            options={
                'indexes': [
                    models.Index(fields=['code', 'is_success', 'ran_at_time'], name='django_cron_code_is_success_ran_at_time_idx'),
                    models.Index(fields=['code', 'start_time', 'ran_at_time'], name='django_cron_code_start_time_ran_at_time_idx'),
                    models.Index(fields=['code', 'start_time'], name='django_cron_code_start_time_idx'),
                ],
            },
        ),
        migrations.CreateModel(
            name='CronJobLock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_name', models.CharField(max_length=200, unique=True)),
                ('locked', models.BooleanField(default=False)),
            ],
        ),
    ]
"""

# Minimal 0002 migration for index renames (optional, harmless if already applied)
MIGRATION_0002 = """# Generated by Django 5.2.7 on 2025-10-23 23:32

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('django_cron', '0001_initial'),
    ]

    operations = [
        migrations.RenameIndex(
            model_name='cronjoblog',
            new_name='django_cron_code_89ad04_idx',
            old_name='django_cron_code_is_success_ran_at_time_idx',
        ),
        migrations.RenameIndex(
            model_name='cronjoblog',
            new_name='django_cron_code_21f381_idx',
            old_name='django_cron_code_start_time_ran_at_time_idx',
        ),
        migrations.RenameIndex(
            model_name='cronjoblog',
            new_name='django_cron_code_966ed3_idx',
            old_name='django_cron_code_start_time_idx',
        ),
    ]
"""

def main():
    if not MIGRATIONS_DIR.exists():
        print(f"Migrations directory not found: {MIGRATIONS_DIR}")
        sys.exit(1)

    files = list(MIGRATIONS_DIR.glob("*.py"))
    to_delete = [p for p in files if p.name not in {"__init__.py", "0001_initial.py", "0002_rename_django_cron_code_is_success_ran_at_time_idx_django_cron_code_89ad04_idx_and_more.py"}]

    # Remove unsupported/legacy migrations if any
    for p in to_delete:
        try:
            p.unlink()
            print(f"Deleted legacy migration: {p}")
        except Exception as e:
            print(f"Failed to delete {p}: {e}")

    # Ensure 0001 exists and is correct
    m1 = MIGRATIONS_DIR / '0001_initial.py'
    write_m1 = True
    if m1.exists():
        try:
            content = m1.read_text()
            if "index_together" in content:
                write_m1 = True
            else:
                write_m1 = False
        except Exception:
            write_m1 = True
    if write_m1:
        m1.write_text(MIGRATION_0001)
        print(f"Wrote {m1}")

    # Ensure 0002 exists
    m2 = MIGRATIONS_DIR / '0002_rename_django_cron_code_is_success_ran_at_time_idx_django_cron_code_89ad04_idx_and_more.py'
    if not m2.exists():
        m2.write_text(MIGRATION_0002)
        print(f"Wrote {m2}")

    print("django-cron migrations are now compatible with Django 5.2+.")


if __name__ == '__main__':
    main()
